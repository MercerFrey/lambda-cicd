# This is a basic workflow to help you get started with Actions
name: Connect to an AWS role from a GitHub repository

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  push:
    branches: [ main, dev]
  pull_request:
    branches: [ main, dev]

env:
  AWS_REGION : eu-central-1 #Change to reflect your Region

# Permission can be added at job level or workflow level    
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

      
jobs:
  GetFileNames:
    runs-on: ubuntu-latest
    outputs:
      lambdaArray: ${{ steps.getLambdas.outputs.lambdas }}
    steps:
      - uses: actions/checkout@v3
      - id: getLambdas
        run: |
          lambdas=$(python3 ./scripts/lambda_finder.py)
          echo $lambdas
          echo "lambdas=${lambdas}" >> $GITHUB_OUTPUT
  UpdateLambdas:
    needs: GetFileNames
    strategy:
      matrix:
        full_path: ${{ fromJson(needs.GetFileNames.outputs.lambdaArray) }}
    runs-on: ubuntu-latest
    steps:
      - name: debug
        run: |
          new_lambda=$(basename ./speaktor/lambda2.py | awk -F\. '{print $1}')
          echo "new_lambda=$new_lambda" >> $GITHUB_ENV
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::331586126609:role/github-workflow #change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: Zip Lambda functions
        run: |
          lambda_zip=$(echo $new_lambda).zip
          zip -j $lambda_zip ${{matrix.full_path}}
          aws lambda update-function-code --function-name=$new_lambda --zip-file=fileb://$lambda_zip
